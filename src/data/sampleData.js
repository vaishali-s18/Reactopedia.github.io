export const sampleArticles = [
  {
    id: 1,
    title: "Understanding HTML Fundamentals",
    slug: "html-fundamentals",
    content: "HTML, or HyperText Markup Language, is the backbone of web development. HTML is used to structure content on the web. It defines elements like headings, paragraphs, links, and images. Elements are the building blocks of HTML, and they can be nested to create complex layouts. For example, a simple HTML document might include a head section with metadata and a body section with the visible content. All the list of tags can be found in the official documentation. Mainly, the content of the HTML document is divided into two main sections: the head and the body. The head contains metadata about the document, such as its title and links to stylesheets or scripts. The body contains the actual content that is displayed in the browser. HTML5 introduced new semantic elements like header, footer, article, and section to better structure web content. These elements help improve accessibility and SEO by providing meaningful context to the content they contain. HTML is constantly evolving, with new features and best practices being introduced regularly. It's important to stay updated with the latest standards and techniques to ensure your web pages are modern, accessible, and performant. HTML uses forms to collect user input, allowing for interactive web applications. Forms can include text fields, checkboxes, radio buttons, and submit buttons. HTML also supports multimedia elements like audio and video, enabling rich media experiences on the web. Web accessibility is a crucial aspect of HTML development. It ensures that web content is usable by people with disabilities. This includes using semantic HTML, providing alternative text for images, and ensuring proper keyboard navigation. HTML is the foundation of web development, and understanding its fundamentals is essential for creating effective and accessible web pages. By mastering HTML, you can build the structure of your web applications and enhance user experiences.",
    lastEdited: "2023-08-15",
    categories: ["HTML", "Fundamentals"]
  },
  {
    id: 2,
    title: "CSS: Styling the Web",
    slug: "css-styling",
    content: "CSS, or Cascading Style Sheets, is used to control the presentation of web pages. CSS are of three types: inline, internal, and external. Inline styles are applied directly to HTML elements using the style attribute. Internal styles are defined within a <style> tag in the head of the document. External styles are linked to an HTML document using a <link> tag, allowing for consistent styling across multiple pages. CSS uses selectors to target HTML elements and apply styles. Selectors can be based on element type, class, ID, or attributes. For example, .className targets elements with a specific class, while #idName targets an element with a specific ID. CSS properties define how elements should be styled, such as color, font size, margins, and padding. Properties can be combined to create complex styles. For example, you can set the background color and text color of an element simultaneously. CSS supports responsive design through media queries, allowing you to apply different styles based on the device's screen size or orientation. This is essential for creating mobile-friendly web applications. CSS also includes layout techniques like Flexbox and Grid, which enable you to create flexible and responsive layouts without relying on floats or positioning hacks. These techniques simplify the process of aligning and distributing space among elements in a container. CSS animations and transitions allow you to create dynamic effects on web pages. You can animate properties like opacity, transform, and color changes to enhance user interactions. CSS preprocessors like Sass and Less provide additional features like variables, nesting, and mixins, making it easier to write maintainable and reusable stylesheets. CSS is an essential skill for web developers, enabling them to create visually appealing and user-friendly web applications.Selectors can be combined to target specific elements more precisely. For example, you can use .className#idName to target an element with both a specific class and ID. CSS also supports pseudo-classes and pseudo-elements, which allow you to style elements based on their state or position in the document. For example, :hover applies styles when the user hovers over an element, while ::before and ::after allow you to insert content before or after an element's content.",
    lastEdited: "2023-08-10",
    categories: ["CSS", "Styling"]
  },
  {
    id: 3,
    title: "React: Building Interactive UIs",
    slug: "react-introduction",
    content: "React is a popular JavaScript library for building user interfaces. React basically uses components to create reusable UI elements. Components can be functional or class-based, and they encapsulate both logic and presentation. React uses a virtual DOM to efficiently update the UI by comparing changes and minimizing direct manipulation of the actual DOM. This improves performance and responsiveness. React's component-based architecture promotes reusability and maintainability. You can create small, self-contained components that can be composed to build complex UIs. React also supports state management, allowing components to manage their own data and respond to user interactions. React uses JSX (JavaScript XML) syntax, which allows you to write HTML-like code within JavaScript. JSX makes it easier to visualize the structure of your components and enhances readability. React's ecosystem includes tools like Create React App for bootstrapping projects, React Router for navigation, and Redux for state management in larger applications. React's declarative approach simplifies UI development by allowing you to describe what the UI should look like based on the current state, rather than manually manipulating the DOM. React is widely used in modern web development due to its flexibility, performance, and strong community support. It is suitable for building everything from small single-page applications to large-scale enterprise solutions.The React ecosystem is vast, with a rich set of libraries and tools that enhance development. Popular libraries include React Router for routing, Redux for state management, and styled-components for styling components. React's community is active and supportive, with numerous resources available for learning and troubleshooting. The React documentation is comprehensive and provides detailed explanations of concepts, best practices, and examples. React is continuously evolving, with new features and improvements being introduced regularly. Staying updated with the latest releases and community trends is essential for React developers.React core concepts include components, props, state, and lifecycle methods. Components are the building blocks of React applications, allowing you to create reusable UI elements. Props are used to pass data from parent components to child components, while state allows components to manage their own data and respond to user interactions. Lifecycle methods enable you to hook into different stages of a component's lifecycle, such as mounting, updating, and unmounting.",
    lastEdited: "2023-08-05",
    categories: ["React", "JavaScript"]
  },
  {
    id: 4,
    title: "JavaScript Essentials",
    slug: "javascript-essentials",
    content: "JavaScript is a versatile programming language that enables dynamic behavior on web pages.Javascript is an essential skill for web developers, enabling them to create interactive and dynamic web applications. It is a versatile language that can be used for both client-side and server-side development. JavaScript supports various programming paradigms, including functional, object-oriented, and imperative programming. It allows you to manipulate the DOM, handle events, and perform asynchronous operations using callbacks, promises, and async/await syntax. JavaScript's ecosystem includes a wide range of libraries and frameworks like React, Angular, and Vue.js that enhance development productivity and enable the creation of complex applications. Understanding JavaScript fundamentals is crucial for mastering modern web development techniques. This means grasping concepts like variables, data types, functions, and control flow. JavaScript's event-driven nature allows you to respond to user interactions and create dynamic web experiences. It also supports asynchronous programming, enabling you to perform tasks like fetching data from APIs without blocking the main thread. JavaScript's flexibility allows you to write code in different styles, from functional programming with higher-order functions to object-oriented programming with classes and prototypes. The language has evolved significantly over the years, with ES6 (ECMAScript 2015) introducing features like arrow functions, template literals, destructuring, and modules. These features enhance code readability and maintainability. JavaScript is widely used in web development, but it can also be used for server-side development with Node.js. This allows developers to build full-stack applications using a single language. JavaScript's popularity has led to a vibrant community and a rich ecosystem of libraries and tools that simplify development tasks. JavaScript is a powerful language that enables developers to create interactive and dynamic web applications. It is an essential skill for modern web development, allowing you to build everything from simple scripts to complex applications. JavaScript's versatility and widespread adoption make it a valuable language to learn for any aspiring web developer. It is the backbone of web development, enabling you to create interactive and dynamic web applications. JavaScript is an essential skill for modern web developers, allowing them to build everything from simple scripts to complex applications. It is a versatile language that can be used for both client-side and server-side development. JavaScript supports various programming paradigms, including functional, object-oriented, and imperative programming. It allows you to manipulate the DOM, handle events, and perform asynchronous operations using callbacks, promises, and async/await syntax. JavaScript's ecosystem includes a wide range of libraries and frameworks like React, Angular, and Vue.js that enhance development productivity and enable the creation of complex applications.",
    lastEdited: "2023-08-01",
    categories: ["JavaScript", "Programming"]
  },
  {
    id: 5,
    title: "Node.js: Server-Side JavaScript",
    slug: "nodejs-introduction",
    content: "Node.js is a runtime environment that allows you to run JavaScript on the server side.In this article we will learn about the basics of nodejs. Node.js is built on the V8 JavaScript engine, which provides high performance and efficiency for server-side applications. It uses an event-driven, non-blocking I/O model, making it suitable for building scalable and real-time applications. Node.js allows you to use JavaScript for server-side development, enabling you to build full-stack applications using a single language. It has a rich ecosystem of modules and packages available through npm (Node Package Manager), which simplifies development tasks and enhances productivity. Node.js is commonly used for building APIs, web servers, and real-time applications like chat applications and online gaming platforms. It supports asynchronous programming, allowing you to handle multiple requests concurrently without blocking the main thread. Node.js is widely adopted in the industry due to its performance, scalability, and ease of use. It is suitable for both small projects and large-scale applications. Node.js has a vibrant community that actively contributes to its development and provides support through forums, documentation, and tutorials. Node.js is a powerful runtime environment that enables developers to build server-side applications using JavaScript. It is an essential skill for modern web developers, allowing them to create scalable and efficient applications that can handle high traffic loads. Node.js is built on the V8 JavaScript engine, which provides high performance and efficiency for server-side applications. It uses an event-driven, non-blocking I/O model, making it suitable for building scalable and real-time applications. Node.js allows you to use JavaScript for server-side development, enabling you to build full-stack applications using a single language. It has a rich ecosystem of modules and packages available through npm (Node Package Manager), which simplifies development tasks and enhances productivity. Node.js is commonly used for building APIs, web servers, and real-time applications like chat applications and online gaming platforms. It supports asynchronous programming, allowing you to handle multiple requests concurrently without blocking the main thread. Node.js is widely adopted in the industry due to its performance, scalability, and ease of use. It is suitable for both small projects and large-scale applications. Node.js has a vibrant community that actively contributes to its development and provides support through forums, documentation, and tutorials. it is an essential skill for modern web developers, allowing them to create scalable and efficient applications that can handle high traffic loads. Node.js is a powerful runtime environment that enables developers to build server-side applications using JavaScript. It is an essential skill for modern web developers, allowing them to create scalable and efficient applications that can handle high traffic loads.",
    lastEdited: "2023-07-28",
    categories: ["Node.js", "Backend"]
  },
  {
    id: 6,
    title: "Express.js: Building Web Applications",
    slug: "expressjs-introduction",
    content: "Express.js is a minimal and flexible Node.js web application framework. xpress.js simplifies the process of building web applications and APIs by providing a robust set of features and middleware. It allows you to define routes, handle requests, and manage responses easily. Express.js is built on top of Node.js, leveraging its non-blocking I/O model for high performance and scalability. It supports various templating engines like EJS, Pug, and Handlebars, enabling you to render dynamic HTML pages. Express.js has a rich ecosystem of middleware that can be used to add functionality like authentication, logging, and error handling to your applications. It is widely used in the industry for building RESTful APIs and single-page applications (SPAs). Express.js is known for its simplicity and ease of use, making it a popular choice for both beginners and experienced developers. It provides a flexible routing system that allows you to define routes based on HTTP methods and URL patterns. Express.js supports middleware functions that can be used to process requests before they reach the final route handler. This allows you to implement features like request validation, authentication, and logging easily. Express.js is highly customizable, allowing you to create modular applications by organizing your code into separate files and directories. It also supports error handling middleware, making it easy to catch and handle errors in your application. Express.js is a powerful framework that enables developers to build web applications quickly and efficiently. It is an essential skill for modern web developers, allowing them to create scalable and maintainable applications using Node.js.",
    lastEdited: "2023-07-25",
    categories: ["Express.js", "Web Development"]
  },
  // --- Hooks Articles ---
  {
    id: 7,
    title: "React useState Hook",
    slug: "react-usestate-hook",
    content: "useState is a Hook that lets you add state to function components. It returns a stateful value and a function to update it.This mainly used to manage local state in functional components. You can initialize state with a value, and the state can be updated using the provided function. For example, const [count, setCount] = useState(0) initializes a count state variable with a value of 0 and provides a setCount function to update it. The useState hook is called at the top level of your component, ensuring that the state is preserved across re-renders. It allows you to create dynamic and interactive components by managing their internal state. The state can be of any type, including primitive values, objects, or arrays. When the state is updated using the set function, React re-renders the component to reflect the new state. This makes it easy to build responsive UIs that react to user input or other changes in data.It is important to note that the state updates are asynchronous, meaning that the new state value may not be immediately available after calling the set function. If you need to perform actions based on the updated state, you can use the useEffect hook to react to state changes. The useState hook is a fundamental part of React's functional component paradigm, allowing you to create components that can manage their own state without needing class components. It promotes a more functional programming style and makes it easier to reason about component behavior. The useState hook is a powerful tool for managing local state in React function components. It allows you to create dynamic and interactive UIs by encapsulating state logic within your components.",
    lastEdited: "2025-06-01",
    categories: ["Hooks", "React"]
  },
  {
    id: 8,
    title: "React useEffect Hook",
    slug: "react-useeffect-hook",
    content: "useEffect lets you perform side effects in function components. It runs after the render and can clean up after itself.the useEffect hook is used to perform side effects in function components, such as fetching data, subscribing to events, or manually changing the DOM. It runs after the component has rendered, allowing you to interact with the DOM or perform asynchronous operations. The useEffect hook takes two arguments: a function that contains the side effect logic and an optional dependency array. The dependency array specifies when the effect should run, allowing you to control when the effect is triggered based on changes in state or props. If the dependency array is empty, the effect runs only once after the initial render, similar to componentDidMount in class components. If you provide dependencies, the effect will re-run whenever any of those dependencies change. This makes it easy to synchronize your component with external data sources or APIs. The useEffect hook can also return a cleanup function that runs before the component unmounts or before the effect re-runs. This is useful for cleaning up subscriptions, timers, or other resources that need to be released when the component is no longer needed. The useEffect hook is a powerful tool for managing side effects in React function components. It allows you to create components that can respond to changes in state or props while keeping your code organized and maintainable.it is a fundamental part of React's functional component paradigm, enabling you to create components that can manage side effects without needing class components. It promotes a more functional programming style and makes it easier to reason about component behavior. The useEffect hook is a powerful tool for managing side effects in React function components. It allows you to create components that can respond to changes in state or props while keeping your code organized and maintainable.",
    lastEdited: "2025-06-02",
    categories: ["Hooks", "React"]
  },
  {
    id: 9,
    title: "Custom Hooks in React",
    slug: "custom-hooks-react",
    content: "Custom Hooks allow you to extract component logic into reusable functions. They can use other hooks and encapsulate complex logic.This allows you to create reusable logic that can be shared across multiple components. Custom hooks are JavaScript functions that start with the word 'use' and can call other hooks like useState, useEffect, or any custom hooks you create. They allow you to encapsulate complex logic and state management in a single function, making your components cleaner and easier to read. Custom hooks can accept parameters, allowing you to pass in values or configuration options that affect their behavior. This makes them flexible and adaptable to different use cases. When you create a custom hook, it can return any value, including state variables, functions, or even other hooks. This allows you to create powerful abstractions that can simplify your component logic. Custom hooks promote code reusability and separation of concerns, making it easier to maintain and test your components. They allow you to extract common logic into a single place, reducing duplication and improving code organization. Custom hooks are a powerful feature of React that enables you to create reusable logic and encapsulate complex behavior in a single function. They promote code reusability and separation of concerns, making your components cleaner and easier to maintain.",
    lastEdited: "2025-06-05",
    categories: ["Hooks", "React"]
  },
  {
    id: 10,
    title: "Using useContext for State Management",
    slug: "usecontext-state-management",
    content: "useContext allows you to access context values in your components, enabling global state management without prop drilling. It simplifies state sharing across components by providing a way to access context values directly. The useContext hook takes a context object created with React.createContext and returns the current context value. This allows you to access shared state or functions without needing to pass them down through props. Using useContext eliminates the need for prop drilling, where you have to pass props through multiple layers of components just to reach a deeply nested component. This makes your code cleaner and easier to maintain. The useContext hook is particularly useful for managing global state, such as user authentication, theme settings, or language preferences. It allows you to create a centralized store that can be accessed by any component in your application. When the context value changes, all components that use the useContext hook will automatically re-render, ensuring that they always have the latest data. This makes it easy to keep your UI in sync with your application's state. The useContext hook is a powerful tool for managing global state in React applications. It simplifies state sharing across components and eliminates the need for prop drilling, making your code cleaner and more maintainable.",
    lastEdited: "2025-06-06",
    categories: ["Hooks", "React"]
  },
  {
    id: 11,
    title: "React useReducer Hook",
    slug: "react-usereducer-hook",
    content: "useReducer is an alternative to useState for managing complex state logic in React components. It allows you to define a reducer function that handles state transitions based on dispatched actions. This is particularly useful for managing state that involves multiple sub-values or when the next state depends on the previous state. The useReducer hook takes two arguments: a reducer function and an initial state. The reducer function receives the current state and an action, and it returns the new state based on the action type. This makes it easy to manage complex state transitions in a predictable way. The useReducer hook returns the current state and a dispatch function that you can use to send actions to the reducer. When you call dispatch with an action, the reducer function is invoked, and the state is updated accordingly. This pattern is similar to Redux, making it easier to scale your application if you decide to use Redux later on. The useReducer hook promotes better separation of concerns by keeping your state logic in a single place, making it easier to test and maintain. It also allows you to encapsulate complex state management logic within a single function, improving code organization. The useReducer hook is a powerful tool for managing complex state logic in React components. It provides a structured way to handle state transitions and promotes better code organization.",
    lastEdited: "2025-06-07",
    categories: ["Hooks", "React"]
  },
  // --- Performance Articles ---
  {
    id: 12,
    title: "Performance Optimization in React",
    slug: "performance-optimization",
    content: "Learn how to optimize your React apps for speed and efficiency using memoization, lazy loading, and code splitting.Code splitting allows you to split your code into smaller chunks that can be loaded on demand, reducing the initial load time of your application. This is especially useful for large applications with many components and dependencies. React's lazy loading feature allows you to load components only when they are needed, improving performance by reducing the amount of code that needs to be loaded initially. Memoization techniques like React.memo and useMemo help you avoid unnecessary re-renders by caching component outputs and values based on their dependencies. This can significantly improve performance in applications with complex state or expensive calculations. Performance optimization is an essential aspect of React development, ensuring that your applications run smoothly and efficiently. By implementing these techniques, you can create fast and responsive user interfaces that provide a better user experience.This article will cover various performance optimization techniques in React, including memoization, lazy loading, and code splitting. These techniques help improve the speed and efficiency of your applications, ensuring a smooth user experience. React's virtual DOM and reconciliation algorithm already provide significant performance benefits, but there are additional strategies you can employ to further enhance your application's performance. By optimizing your React applications, you can reduce load times, improve responsiveness, and create a better overall user experience.",
    lastEdited: "2025-06-03",
    categories: ["Performance", "React"]
  },
  {
    id: 13,
    title: "React.memo and useMemo",
    slug: "react-memo-usememo",
    content: "React.memo and useMemo help you optimize performance by memoizing components and values to avoid unnecessary re-renders.It is particularly useful for functional components that receive props and need to avoid re-rendering when the props haven't changed. React.memo is a higher-order component that wraps your functional component and only re-renders it if its props have changed. This can significantly improve performance in applications with complex components or expensive calculations. The useMemo hook allows you to memoize values based on their dependencies, preventing unnecessary recalculations. This is especially useful for expensive computations that don't need to be recalculated on every render. By using React.memo and useMemo, you can optimize your React applications for better performance, reducing the number of re-renders and improving overall responsiveness. These techniques are essential for building efficient and performant React applications, especially as your application grows in complexity.this article will cover how to use React.memo and useMemo to optimize performance in your React applications. These techniques help you avoid unnecessary re-renders and improve the overall efficiency of your components. React.memo is a higher-order component that wraps your functional component and only re-renders it if its props have changed. This can significantly improve performance in applications with complex components or expensive calculations. The useMemo hook allows you to memoize values based on their dependencies, preventing unnecessary recalculations. This is especially useful for expensive computations that don't need to be recalculated on every render. By using React.memo and useMemo, you can optimize your React applications for better performance, reducing the number of re-renders and improving overall responsiveness.",
    lastEdited: "2025-06-04",
    categories: ["Performance", "Hooks", "React"]
  },
  {
    id: 14,
    title: "Lazy Loading Components in React",
    slug: "lazy-loading-components",
    content: "Lazy loading allows you to load components only when they are needed, improving initial load time and performance. This is particularly useful for large applications with many components and dependencies. React's lazy loading feature allows you to split your code into smaller chunks that can be loaded on demand, reducing the initial load time of your application. By using React.lazy and Suspense, you can create a more efficient loading strategy for your components. Lazy loading helps improve performance by reducing the amount of code that needs to be loaded initially, allowing users to interact with your application faster. It also helps reduce the overall bundle size, making your application more efficient and responsive. Lazy loading is an essential technique for optimizing performance in React applications, especially as your application grows in complexity. By implementing lazy loading, you can create fast and responsive user interfaces that provide a better user experience.",
    lastEdited: "2025-06-08",
    categories: ["Performance", "React"]
  },
  {
    id: 15,
    title: "Code Splitting in React",
    slug: "code-splitting-react",
    content: "Code splitting allows you to split your code into smaller chunks that can be loaded on demand, reducing the initial load time of your application. This is especially useful for large applications with many components and dependencies. React's lazy loading feature allows you to load components only when they are needed, improving performance by reducing the amount of code that needs to be loaded initially. By using dynamic imports and React.lazy, you can create a more efficient loading strategy for your components. Code splitting helps improve performance by reducing the overall bundle size, making your application more efficient and responsive. It also allows you to load only the necessary code for each route or component, improving the user experience. Code splitting is an essential technique for optimizing performance in React applications, especially as your application grows in complexity. By implementing code splitting, you can create fast and responsive user interfaces that provide a better user experience.",
    lastEdited: "2025-06-09",
    categories: ["Performance", "React"]
  },
  {
    id: 16,
    title: "Optimizing React Performance with useCallback",
    slug: "usecallback-optimization",
    content: "useCallback is a hook that helps you optimize performance by memoizing functions to avoid unnecessary re-renders. It is particularly useful when passing functions as props to child components, preventing them from re-rendering when the parent component updates. By using useCallback, you can ensure that the same function reference is used across renders, which can improve performance in applications with complex components or expensive calculations. The useCallback hook takes two arguments: a function and a dependency array. The function is memoized and will only be recreated if any of the dependencies change. This allows you to control when the function should be updated, reducing unnecessary re-renders. By optimizing your React applications with useCallback, you can create more efficient and performant components that respond quickly to user interactions. This technique is essential for building scalable and maintainable React applications.",
    lastEdited: "2025-06-10",
    categories: ["Performance", "Hooks", "React"]
  },
  {
    id: 17,
    title: "Profiling React Applications",
    slug: "profiling-react-applications",
    content: "Profiling helps you identify performance bottlenecks in your React applications using the React Profiler and browser developer tools. The React Profiler provides insights into component rendering times, allowing you to see which components are taking the most time to render. This information can help you identify areas for optimization and improve the overall performance of your application. Browser developer tools also offer profiling features that allow you to analyze JavaScript execution, memory usage, and network requests. By using these tools, you can gain a deeper understanding of your application's performance and make informed decisions about optimizations. Profiling is an essential step in optimizing React applications, helping you create fast and responsive user interfaces that provide a better user experience.",
    lastEdited: "2025-06-11",
    categories: ["Performance", "React"]
  }
];